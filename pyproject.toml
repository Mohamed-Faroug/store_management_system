[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "inventory-management-system"
version = "1.0.0"
description = "نظام شامل لإدارة المخزون والمبيعات"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "محمد فاروق", email = "mfarouk@example.com"}
]
maintainers = [
    {name = "محمد فاروق", email = "mfarouk@example.com"}
]
keywords = ["inventory", "management", "pos", "sales", "arabic", "flask"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.8"
dependencies = [
    "Flask>=2.3.3",
    "Werkzeug>=2.3.7",
    "SQLAlchemy>=2.0.21",
    "Flask-SQLAlchemy>=3.0.5",
    "Flask-Login>=0.6.3",
    "Jinja2>=3.1.2",
    "MarkupSafe>=2.1.3",
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
    "simplejson>=3.19.1",
    "pathlib2>=2.3.7",
    "gunicorn>=21.2.0",
    "python-dotenv>=1.0.0",
    "Flask-CORS>=4.0.0",
    "Flask-Session>=0.5.0",
    "WTForms>=3.0.1",
    "Flask-WTF>=1.1.1",
    "Flask-Mail>=0.9.1",
    "Flask-Uploads>=0.2.1",
    "Flask-Caching>=2.0.2",
    "Flask-MonitoringDashboard>=3.1.2",
    "Flask-RESTful>=0.3.10",
    "flask-restx>=1.1.5",
    "Flask-Migrate>=4.0.5",
    "Flask-Config>=0.4.2",
    "Flask-ErrorHandler>=0.1.0",
    "click>=8.1.7",
    "itsdangerous>=2.1.2",
    "blinker>=1.6.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-flask>=1.2.0",
    "pytest-cov>=4.1.0",
    "flake8>=6.0.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
docs = [
    "Sphinx>=7.1.2",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
test = [
    "pytest>=7.4.2",
    "pytest-flask>=1.2.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.2.0",
    "faker>=19.0.0",
]

[project.urls]
Homepage = "https://github.com/mfarouk/inventory-management-system"
Documentation = "https://inventory-management-system.readthedocs.io"
Repository = "https://github.com/mfarouk/inventory-management-system.git"
Issues = "https://github.com/mfarouk/inventory-management-system/issues"
Changelog = "https://github.com/mfarouk/inventory-management-system/blob/main/CHANGELOG.md"

[project.scripts]
inventory = "run:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "docs*", "venv*", ".git*"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.json", "*.md", "*.txt", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["flask", "sqlalchemy", "werkzeug"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "ui: marks tests as UI tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
quiet = false
full_report = true
